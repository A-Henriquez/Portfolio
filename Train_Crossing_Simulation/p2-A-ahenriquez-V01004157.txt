

Questions:
How many threads are you going to use? Specify the work that you intend each thread to perform.
    main/dispatcher thread: 
        only one, 
        will be the one dispatching each train, managing the wait queue and signalling when to go
        deciding the order and ensuring priority is maintained
    train thread: 
        can have multiple train threads going as some may be waiting for signal
        will signal when it is ready to go and be put in wait queue, signal when done crossing 

Do the threads work independently? Or, is there an overall “controller” thread?
    overall controller thread is the dispatcher which is managing order of crossing
    threads are independent of each other but work closely through the mutex and convars to check if its their turn to cross or not

How many mutexes are you going to use? Specify the operation that each mutex will guard.
    mutex for the station array
    mutex for the crossing
    mutex for loading,

Will the main thread be idle? If not, what will it be doing?
    Main thread wont be idle.
    Should be creating train threads
    should be looping, constantly checking for the ready state of the trains and scheduling which train will get to cross

How are you going to represent stations (which are collections of loaded trains ready to depart)? That is, what type of data structure will you use?
    stations represented as arrays/

    "Think about how many arrays you need to use"

How are you going to ensure that data structures in your program will not be modified concurrently?
    by having a mutex be in place so that only one thread can manipulate the array at a time 

    “How to ensure that while one train is corssing, other trains can still add themselves to the queues.”

How many convars are you going to use? For each convar:
Describe the condition that the convar will represent.
    Which mutex is associated with the convar? Why?
    What operation should be performed once pthread_cond_wait() has been unblocked and re-acquired the mutex?


    loading convar:
        - represent for when a train is done loading
        - associated with stations mutex and loading mutex
            need to adjust the stations array by adding the train to the array
            need the loading mutex for when accessing loading data 
        - once pthread_cond_wait() has been unblocked:
            lock the loading mutex
            update station array 
            signal to dispatcher that train is ready to cross

    crossing convar: 
        - represent when a train is currently crossing
        - associated with stations mutex and crossing mutex
            need to adjust the stations array for removing the train from the array
            need the crossing mutex to halt operations so that only one train can cross at a time
        - once pthread_cond_wait() has been unblocked:
            lock the crossing mutex and update station array
            able to signal to other trains that they may cross now

"How many convars? Check tutorial slides this week"

Overall algorithm:

Read Input: Start by reading the input file to get train details and store them in an array, from these the train threads will be created based on passed information

Create Main/Dispatcher Thread: Set up a dispatcher thread that keeps track of train crossings and makes sure they follow priority rules

Create Train Threads: For each train, create a thread that simulates the loading and crossing process

Loading Phase: Each train thread takes a break for its loading time, then lets the dispatcher know it's ready

Signal Ready: Once loaded, grab the station mutex, add the train to the waiting queue, and then release the mutex

Dispatcher Checks Queue: The dispatcher keeps an eye on the waiting queue for trains that are ready to go

Crossing Decision: When a train is ready, the dispatcher uses mutexes to make sure only one train crosses at a time, following the priority rules

Crossing Phase: The train that’s selected will sleep for its crossing time while it’s on the main track

Update Train State: After crossing, the train signals it’s done, and the dispatcher updates the queue

Loop: Keep checking and processing trains until they’ve all crossed

Cleanup: join all the train threads and clean up the mutexes and condition variables

    



/// tutorial 7 - 22 oct. - design feedback 

2 mutexs: one for track access and one for queue access

stations representations
 - 2 priority queues or 4 regular queue 
 - 4 queues : a high priority and a low priority for each station

 if follows design from tutorial slides
    - each train has its own local conditional variable 
        pass the convar to train thread by having a structure the hold loading time and crossing time 

dispatcher thread broadcasts a general signal of a specific train id through convar to tell that train to go 

Ensure ALL train threads are waiting before starting the cross -- this is to synchronize 
use a shared counter and a mutex to track how many threads reach start loading state 
    when all trains reach start loading state then dispatcher thread can start broadcasting otherwise it has to be kept waiting 
    from loading c 
    addin to the while loop before the cond_wait ;train ready; a counter incrementer 
    then checking before con_broadcast in while loop if shared counter is smaller than the number of trains
        release the mutex 
    if it is equal then it continues 



// tutorial 8 - 29 oct.

recommend to use 1 condition variable for each train thread
- one should broadcast all trains to start loading
- one to signal to a specific train to cross the track
- one should notify that the train has finished crossing and is free 

input file can be example from gitlab 







// todo
    redo makefile
    do the readme


    want to:
    do helper function of:
        whats the next train to cross?
        priority access and queues
                aging and checking for starvation


- have them load at right time
- do priority queues and crosses based on queue priority
    - do ALL logic for it 
- correct print statements 

- figure out timer function and way to keep things in time





// oldmakefile
all: mts

ssi: mts.c
	gcc mts.c -Wall -g -lreadline -lhistory -ltermcap  -o mts


clean:
	rm -f *.o
	rm -f mts







// 
/*
Workflow

main thread: 
        read input file 
        create train threads

        broadcast start loading  --> train thread waits to start loading 

        Loops:
            check/ waits for ready trains
            dispatcher chooses/ signals next train to cross --> train thread waits for signal to cross
                * criteria for which train gets to go next

            wait until finished crossing

        end if all trains have crossed
        

train thread:
    wait to start loading

    usleep(loading time)

    add to queue
    change train status and signal --> main thread checks waits for ready train signal

    wait for signal to cross

    usleep(crossing time) --> while crossing main thread waits until finished 
    signal

    exit 


*/
